From bc22e9e988e7e0087f8e97363285392ae9fef076 Mon Sep 17 00:00:00 2001
From: Illia Smyrnov <illia.smyrnov@globallogic.com>
Date: Sun, 7 Apr 2019 20:17:23 +0300
Subject: [PATCH] syscalls: Add hello demo syscall for education purposes

This change is a demonstration how to add simple system call.
It introduces system call SYS_hello - adds it to the system
and provide an implementation.

Signed-off-by: Illia Smyrnov <illia.smyrnov@globallogic.com>
---
 arch/arm/tools/syscall.tbl |  1 +
 include/linux/syscalls.h   |  1 +
 init/Kconfig               |  8 ++++++++
 kernel/Makefile            |  2 ++
 kernel/sys-hello.c         | 34 ++++++++++++++++++++++++++++++++++
 kernel/sys_ni.c            |  1 +
 6 files changed, 47 insertions(+)
 create mode 100644 kernel/sys-hello.c

diff --git a/arch/arm/tools/syscall.tbl b/arch/arm/tools/syscall.tbl
index 8edf93b4490f..480a68fa4324 100644
--- a/arch/arm/tools/syscall.tbl
+++ b/arch/arm/tools/syscall.tbl
@@ -414,3 +414,4 @@
 397	common	statx			sys_statx
 398	common	rseq			sys_rseq
 399	common	io_pgetevents		sys_io_pgetevents
+400	common	hello			sys_hello
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 2ff814c92f7f..c76e68d9cd6a 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -906,6 +906,7 @@ asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
 asmlinkage long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len,
 			 int flags, uint32_t sig);
+asmlinkage long sys_hello(char __user *hello_buf, unsigned int len);
 
 /*
  * Architecture-specific system calls
diff --git a/init/Kconfig b/init/Kconfig
index 864af10bb1b9..a3acdea4dc45 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1508,6 +1508,14 @@ config DEBUG_RSEQ
 
 	  If unsure, say N.
 
+config HELLO_SYSCALL
+	bool "Enable hello world system call" if EXPERT
+	default y
+	---help---
+	  Hello world syscall sample.
+
+	  If unsure say Y here.
+
 config EMBEDDED
 	bool "Embedded system"
 	option allnoconfig_y
diff --git a/kernel/Makefile b/kernel/Makefile
index 7a63d567fdb5..74977c1fe8ff 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -117,6 +117,8 @@ obj-$(CONFIG_HAS_IOMEM) += iomem.o
 obj-$(CONFIG_ZONE_DEVICE) += memremap.o
 obj-$(CONFIG_RSEQ) += rseq.o
 
+obj-$(CONFIG_HELLO_SYSCALL) += sys-hello.o
+
 $(obj)/configs.o: $(obj)/config_data.h
 
 targets += config_data.gz
diff --git a/kernel/sys-hello.c b/kernel/sys-hello.c
new file mode 100644
index 000000000000..b6efcf1f00ff
--- /dev/null
+++ b/kernel/sys-hello.c
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+/*
+ * Hello syscall demo
+ */
+
+#define DEBUG
+
+#include <linux/string.h>
+#include <linux/syscalls.h>
+
+#define HELLO_STRING	"Hello from kernel!"
+
+SYSCALL_DEFINE2(hello, char __user *, hello_buf, unsigned int, len)
+{
+
+	pr_debug("%s:%d SYS_hello: Dump stack:\n\n",
+		 __func__, __LINE__);
+
+	dump_stack();
+
+	pr_debug("\n");
+
+	pr_debug("%s:%d SYS_hello: hello_buf 0x%px, len %d\n",
+		 __func__, __LINE__, hello_buf, len);
+
+	if (strlen(HELLO_STRING) + 1 > len)
+		return -EINVAL;
+
+	if (copy_to_user(hello_buf, HELLO_STRING, strlen(HELLO_STRING) + 1))
+		return -EFAULT;
+
+	return 0;
+}
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index df556175be50..ef1ba5fada0b 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -396,6 +396,7 @@ COND_SYSCALL(send);
 COND_SYSCALL(bdflush);
 COND_SYSCALL(uselib);
 
+COND_SYSCALL(hello);
 
 /*
  * The syscalls below are not found in include/uapi/asm-generic/unistd.h
-- 
2.20.1

