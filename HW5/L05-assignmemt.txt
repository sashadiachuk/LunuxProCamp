Продовжуємо використовувати попередній код.

Подивіться адреси завантаження своїх модулів на sysfs у каталозі поруч з параметрами модуля:
  /sys/module/<modulename>/sections/
Увага: файли з адресами мають такі ж назви, як було назавано секції,
тобто починаються з крапки (.text, .init.text, ...), врахуйте це.

Перелік літератури подано на останній сторінці слайдів.
Будь-ласка, ознайомтеся додатково з debugfs. Бо стискання двох лекцій до одної
і 130 слайдів до 40 не дало можливості зупинитися на цьому докладніше,
а воно буде потрібне пізніше. Будемо додавати малими дозами.

Тут два завдання, для Basic потрібно виконати одне з них на вибір, для Advanced — обидва.

== Завдання Basic 1:
Упевніться у відсутності каталогу
/sys/kernel/debug/dynamic_debug
що означає вимкнену опцію CONFIG_DYNAMIC_DEBUG (якщо збиралося по методичці,
то не повинно бути).

Замініть у функції exit модуля hello (hello1) друк вмісту списку на pr_debug
і додайте два виклики pr_debug до та після друку списку.
Перевірте залежність друку повідомлень від #define DEBUG на початку файлу

Перезберіть ядро з увімкненим CONFIG_DYNAMIC_DEBUG, замініть його на nfs.
Перезберіть модуль.
Аналогічно показаному на слайдах, поекспериментуйте з друком з прапорцями p, f, m,
а також зі встановленням їх для всього модуля та для окремих рядків.

== Завдання Basic 2:

Додайте BUG_ON() замість друку повідомлення та повернення -EINVAL для неприпустимого
значення параметра.
Додайте примусове внесення помилки «начебто kmalloc() повернув 0» під час формування
елемента списку для якогось повідомлення (останнього із серії, 5-го, ... — на ваш вибір).

Отримайте обидва повідомлення, роздивіться їх та для одного з них виконайте пошук
місця аварії аналогічно слайдам.

Висшліть архів з проектом і логами/скріншотами.

Будь-ласка, висилайте домашні завдання у відповідь на мій лист, так мені легше відстежувати у пошті.

